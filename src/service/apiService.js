// src/services/apiService.js
import { useAuthStore } from '@/stores/auth';
import axios from 'axios';

const api = axios.create({
    baseURL: 'https://www.family-sivarom.com/',
    withCredentials: true
});

let onError;

export function setErrorHandler(fn) {
    onError = fn;
}

// Interceptor: ‡πÅ‡∏ô‡∏ö accessToken ‡∏ó‡∏∏‡∏Å request
api.interceptors.request.use((config) => {
    const authStore = useAuthStore();
    if (authStore.accessToken) {
        config.headers.Authorization = `Bearer ${authStore.accessToken}`;
    }
    return config;
});

// Interceptor: ‡∏ñ‡πâ‡∏≤ accessToken ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏Ç‡∏≠ refresh token
api.interceptors.response.use(
    (res) => res,
    async (error) => {
        const originalRequest = error.config;

        if (onError) {
            const msg = error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
            onError(msg);
        }

        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            try {
                // üî• ‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏¢‡∏Å ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ api ‚Üí ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô interceptor
                const res = await axios.post(
                    'https://www.family-sivarom.com/auth/refreshToken',
                    {},
                    {
                        withCredentials: true
                    }
                );

                const authStore = useAuthStore();

                // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô store
                authStore.setAuth(authStore.user, res.data.accessToken);

                // ‡∏¢‡∏¥‡∏á API ‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥
                originalRequest.headers.Authorization = `Bearer ${res.data.accessToken}`;
                return api(originalRequest);
            } catch (err) {
                // ‡∏ñ‡πâ‡∏≤ refresh fail ‚Üí logout
                const authStore = useAuthStore();
                authStore.logout();
                window.location.href = '/';
            }
        }

        return Promise.reject(error);
    }
);

export default api;
